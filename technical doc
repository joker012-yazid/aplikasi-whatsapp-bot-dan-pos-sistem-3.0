# Technical Documentation
## WhatsApp Bot & CRM System

---

## 1. SYSTEM OVERVIEW

### Tech Stack
```
Frontend:     Next.js 14+ (App Router)
Backend:      Node.js + Express
Database:     PostgreSQL 15+
Container:    Docker Compose
WhatsApp:     Baileys Library
AI:           OpenAI API (GPT-4)
UI:           Shadcn/ui + Tailwind CSS
Real-time:    Socket.io
```

### Architecture
```
┌─────────────┐
│   Next.js   │  ← Web Interface
│   Frontend  │
└──────┬──────┘
       │
┌──────▼──────┐
│   Node.js   │  ← API Server
│   Backend   │
└──┬───┬───┬──┘
   │   │   │
   ▼   ▼   ▼
┌──────┐ ┌─────────┐ ┌──────────┐
│ Baileys│ │ OpenAI  │ │PostgreSQL│
│WhatsApp│ │   AI    │ │    DB    │
└────────┘ └─────────┘ └──────────┘
```

---

## 2. FITUR UTAMA

### A. WhatsApp Automation Module

#### Features:
1. **QR Code Registration System**
   - Generate unique QR for each customer
   - Auto-capture customer data
   - T&C acceptance tracking

2. **AI Auto-Reply**
   - Context-aware responses using OpenAI
   - Query database sebelum reply
   - Fallback to technician jika AI tak dapat jawab

3. **Job Management Flow**
   - Auto-send terima kasih message
   - Send diagnosis & quotation
   - Track customer approval
   - Progress updates dengan gambar
   - Invoice delivery
   - Review request automation

4. **Smart Reminder System**
   - Day 1: First reminder
   - Day 20: Second reminder  
   - Day 30: Third reminder
   - Auto-stop bila customer respond

5. **Broadcast Campaign**
   - Mass messaging dengan personalization
   - Anti-ban protection (delays, limits)
   - Schedule broadcasts
   - Track delivery & read status

### B. POS & Inventory Module

#### Features:
1. **Sales Transaction**
   - Quick product search
   - Multi-payment methods
   - Discount application
   - Print/send invoice

2. **Repair Job Tracking**
   - Job assignment to technician
   - Status tracking (Pending → In Progress → Completed)
   - Parts & labor tracking
   - Photo documentation

3. **Quotation Management**
   - Create quotation
   - Send via WhatsApp
   - Convert to invoice upon approval
   - Track pending quotations

4. **Inventory Management**
   - Real-time stock levels
   - Low stock alerts
   - Stock movements tracking
   - Purchase order management

### C. CRM Module

#### Features:
1. **Customer Management**
   - Customer profile dengan history
   - Device registration
   - Visit tracking
   - Spending analytics

2. **Communication History**
   - All WhatsApp conversations
   - Email communications
   - Notes & follow-ups

3. **Segmentation**
   - Customer categorization
   - Tag management
   - Marketing opt-in/out

### D. Reporting & Analytics

#### Features:
1. **Sales Reports**
   - Daily/monthly revenue
   - Payment breakdown
   - Top products/services

2. **Job Reports**
   - Pending jobs
   - Completion rate
   - Technician performance

3. **WhatsApp Analytics**
   - Message sent/delivered/read
   - Response rate
   - Campaign performance

---

## 3. USER FLOW

### Flow 1: Customer Walk-in dengan WhatsApp Bot

```
[Customer datang ke kedai]
         ↓
[Perbincangan masalah dengan staff]
         ↓
[Customer setuju tinggalkan barang]
         ↓
[Technician generate QR Code dari system]
         ↓
[Customer scan QR → Redirect ke form]
         ↓
[Customer isi form:]
  - Nama
  - No Telefon  
  - Jenis Barang
  - Model
  - Accept T&C
         ↓
[Submit form → Data saved to DB]
         ↓
[Bot auto-send WhatsApp:]
  "Terima kasih [Nama], barang anda 
   sedang kami periksa. Kami akan 
   update masalah dan harga repair."
         ↓
[Technician periksa barang]
         ↓
[Technician input via Web UI:]
  - Diagnosis
  - Harga repair
  - Submit
         ↓
[Bot auto-send quotation ke customer]
  "Diagnosis: [masalah]
   Harga repair: RM[harga]
   Reply SETUJU untuk proceed"
         ↓
┌─────────────────┴─────────────────┐
│                                   │
▼                                   ▼
[Customer reply: SETUJU]      [Customer reply: TAK]
         ↓                           ↓
[Bot: Barang akan dibaiki]    [Bot: Boleh ambil barang]
         ↓                           ↓
[Technician start repair]     [Customer inform bila nak ambil]
         ↓                           ↓
[Tech upload progress photo]  [Customer pickup (end)]
         ↓
[Bot send progress update]
         ↓
[Repair completed]
         ↓
[Tech upload completion photo]
         ↓
[Bot send:]
  - Completion photo
  - Invoice
  - "Boleh ambil barang"
         ↓
[Customer datang & payment]
         ↓
[Staff update: Payment received]
         ↓
[Bot send: Terima kasih + Review link]
         ↓
[End]
```

**Reminder Flow (Parallel):**
```
[Quotation sent]
      ↓
[Wait 24 hours]
      ↓
[No response?] → [Send Reminder 1]
      ↓
[Wait 19 days]
      ↓
[No response?] → [Send Reminder 2]
      ↓
[Wait 10 days]
      ↓
[No response?] → [Send Reminder 3]
```

### Flow 2: WhatsApp Blaster Campaign

```
[Admin login to Web UI]
         ↓
[Navigate to Broadcast Campaign]
         ↓
[Create New Campaign:]
  - Campaign name
  - Select target (all/filtered customers)
  - Compose message (with variables)
  - Attach media (optional)
  - Schedule time
         ↓
[Preview campaign]
         ↓
[Submit campaign]
         ↓
[System validates:]
  - Check daily limit
  - Check anti-ban settings
  - Verify recipients
         ↓
[Campaign queued]
         ↓
[At scheduled time:]
         ↓
[Process queue with delays:]
  FOR EACH customer:
    - Personalize message
    - Send WhatsApp
    - Random delay 30-60 sec
    - Log delivery status
    - IF daily limit reached → STOP
         ↓
[Campaign completed]
         ↓
[Generate analytics report]
         ↓
[End]
```

### Flow 3: POS Transaction

```
[Staff open POS interface]
         ↓
[Search customer (or create new)]
         ↓
[Add items to cart:]
  - Scan barcode / search product
  - Add service
  - Set quantity
         ↓
[Apply discount (if any)]
         ↓
[Review cart total]
         ↓
[Select payment method:]
  - Cash
  - Card
  - E-wallet
  - Credit (invoice later)
         ↓
[Process payment]
         ↓
[Generate invoice]
         ↓
[Choose delivery method:]
  - Print
  - Send WhatsApp
  - Email
         ↓
[Update inventory (auto-deduct stock)]
         ↓
[Transaction completed]
         ↓
[End]
```

### Flow 4: AI Auto-Reply

```
[Customer send WhatsApp message]
         ↓
[Bot receives message]
         ↓
[Check: Is this registered customer?]
         ↓
    NO → [Extract phone number]
         ↓
         [Search in DB by phone]
         ↓
         [Found?]
         ↓
    NO → [Create temporary customer record]
         ↓
    YES → [Load customer context]
              ↓
[Analyze message intent using OpenAI]
         ↓
[Query relevant data from DB:]
  - Customer history
  - Active jobs
  - Products info
  - Common FAQs
         ↓
[Send context to OpenAI]
         ↓
[OpenAI generate response]
         ↓
[Validate response:]
  - Is answer confident?
  - Have required info?
         ↓
    YES → [Send reply to customer]
         ↓
         [Log conversation]
         ↓
         [End]
         ↓
    NO → [Send fallback message:]
         "Tunggu sebentar, teknisi 
          kami akan melayan anda"
         ↓
         [Notify staff via Web UI]
         ↓
         [Staff take over conversation]
         ↓
         [End]
```

---

## 4. DATABASE SCHEMA (PostgreSQL)

### 4.1 Customers Module

```sql
-- Customer Table
CREATE TABLE customers (
    customer_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    full_name VARCHAR(255) NOT NULL,
    phone_number VARCHAR(20) UNIQUE NOT NULL,
    email VARCHAR(255),
    address TEXT,
    city VARCHAR(100),
    state VARCHAR(100),
    postcode VARCHAR(10),
    customer_type VARCHAR(50) DEFAULT 'Regular', -- Regular, VIP, New
    total_visits INTEGER DEFAULT 0,
    total_spending DECIMAL(10,2) DEFAULT 0.00,
    marketing_opt_in BOOLEAN DEFAULT TRUE,
    date_registered TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_visit_date TIMESTAMP,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_customers_phone ON customers(phone_number);
CREATE INDEX idx_customers_type ON customers(customer_type);
CREATE INDEX idx_customers_name ON customers(full_name);

-- Customer Tags
CREATE TABLE customer_tags (
    tag_id SERIAL PRIMARY KEY,
    customer_id UUID REFERENCES customers(customer_id) ON DELETE CASCADE,
    tag_name VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_customer_tags_customer ON customer_tags(customer_id);
CREATE INDEX idx_customer_tags_name ON customer_tags(tag_name);
```

### 4.2 Devices Module

```sql
-- Devices Table
CREATE TABLE devices (
    device_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    customer_id UUID REFERENCES customers(customer_id) ON DELETE CASCADE,
    device_type VARCHAR(50) NOT NULL, -- Laptop, PC, Printer, etc
    brand VARCHAR(100),
    model VARCHAR(255) NOT NULL,
    serial_number VARCHAR(255),
    purchase_date DATE,
    warranty_expiry DATE,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_devices_customer ON devices(customer_id);
CREATE INDEX idx_devices_type ON devices(device_type);
```

### 4.3 Jobs/Repairs Module

```sql
-- Jobs Table
CREATE TABLE jobs (
    job_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    job_number VARCHAR(50) UNIQUE NOT NULL, -- JOB-2024-0001
    customer_id UUID REFERENCES customers(customer_id) ON DELETE RESTRICT,
    device_id UUID REFERENCES devices(device_id) ON DELETE RESTRICT,
    technician_id UUID REFERENCES users(user_id),
    problem_description TEXT NOT NULL,
    diagnosis TEXT,
    repair_cost DECIMAL(10,2),
    status VARCHAR(50) NOT NULL DEFAULT 'Pending', 
    -- Status: Pending, Quoted, Approved, In Progress, Completed, Delivered, Cancelled, Rejected
    priority VARCHAR(20) DEFAULT 'Normal', -- Low, Normal, High, Urgent
    date_received TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    quotation_sent_at TIMESTAMP,
    customer_response_at TIMESTAMP,
    repair_started_at TIMESTAMP,
    repair_completed_at TIMESTAMP,
    delivered_at TIMESTAMP,
    estimated_completion DATE,
    terms_accepted BOOLEAN DEFAULT FALSE,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_jobs_customer ON jobs(customer_id);
CREATE INDEX idx_jobs_status ON jobs(status);
CREATE INDEX idx_jobs_technician ON jobs(technician_id);
CREATE INDEX idx_jobs_date ON jobs(date_received);
CREATE INDEX idx_jobs_number ON jobs(job_number);

-- Job Photos
CREATE TABLE job_photos (
    photo_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    job_id UUID REFERENCES jobs(job_id) ON DELETE CASCADE,
    photo_type VARCHAR(50) NOT NULL, -- Before, Progress, After
    photo_url TEXT NOT NULL,
    caption TEXT,
    uploaded_by UUID REFERENCES users(user_id),
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_job_photos_job ON job_photos(job_id);

-- Job Parts (Items used in repair)
CREATE TABLE job_parts (
    job_part_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    job_id UUID REFERENCES jobs(job_id) ON DELETE CASCADE,
    inventory_id UUID REFERENCES inventory(inventory_id),
    part_name VARCHAR(255) NOT NULL,
    quantity INTEGER NOT NULL DEFAULT 1,
    unit_cost DECIMAL(10,2) NOT NULL,
    total_cost DECIMAL(10,2) GENERATED ALWAYS AS (quantity * unit_cost) STORED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_job_parts_job ON job_parts(job_id);

-- Job Labor
CREATE TABLE job_labor (
    labor_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    job_id UUID REFERENCES jobs(job_id) ON DELETE CASCADE,
    description VARCHAR(255) NOT NULL,
    hours DECIMAL(5,2) NOT NULL,
    rate_per_hour DECIMAL(10,2) NOT NULL,
    total_cost DECIMAL(10,2) GENERATED ALWAYS AS (hours * rate_per_hour) STORED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_job_labor_job ON job_labor(job_id);
```

### 4.4 Invoices & Payments Module

```sql
-- Invoices Table
CREATE TABLE invoices (
    invoice_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    invoice_number VARCHAR(50) UNIQUE NOT NULL, -- INV-2024-0001
    job_id UUID REFERENCES jobs(job_id),
    customer_id UUID REFERENCES customers(customer_id) ON DELETE RESTRICT,
    invoice_date DATE NOT NULL DEFAULT CURRENT_DATE,
    due_date DATE,
    subtotal DECIMAL(10,2) NOT NULL DEFAULT 0.00,
    tax_rate DECIMAL(5,2) DEFAULT 0.00,
    tax_amount DECIMAL(10,2) GENERATED ALWAYS AS (subtotal * tax_rate / 100) STORED,
    discount_amount DECIMAL(10,2) DEFAULT 0.00,
    total_amount DECIMAL(10,2) GENERATED ALWAYS AS (subtotal + (subtotal * tax_rate / 100) - discount_amount) STORED,
    amount_paid DECIMAL(10,2) DEFAULT 0.00,
    balance DECIMAL(10,2) GENERATED ALWAYS AS (subtotal + (subtotal * tax_rate / 100) - discount_amount - amount_paid) STORED,
    payment_status VARCHAR(50) DEFAULT 'Unpaid', -- Unpaid, Partial, Paid, Cancelled
    notes TEXT,
    sent_via_whatsapp BOOLEAN DEFAULT FALSE,
    sent_via_email BOOLEAN DEFAULT FALSE,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_invoices_customer ON invoices(customer_id);
CREATE INDEX idx_invoices_job ON invoices(job_id);
CREATE INDEX idx_invoices_status ON invoices(payment_status);
CREATE INDEX idx_invoices_date ON invoices(invoice_date);
CREATE INDEX idx_invoices_number ON invoices(invoice_number);

-- Invoice Line Items
CREATE TABLE invoice_items (
    item_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    invoice_id UUID REFERENCES invoices(invoice_id) ON DELETE CASCADE,
    item_type VARCHAR(50) NOT NULL, -- Product, Service, Part, Labor
    description TEXT NOT NULL,
    quantity DECIMAL(10,2) NOT NULL DEFAULT 1,
    unit_price DECIMAL(10,2) NOT NULL,
    total_price DECIMAL(10,2) GENERATED ALWAYS AS (quantity * unit_price) STORED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_invoice_items_invoice ON invoice_items(invoice_id);

-- Payments Table
CREATE TABLE payments (
    payment_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    invoice_id UUID REFERENCES invoices(invoice_id) ON DELETE RESTRICT,
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    amount DECIMAL(10,2) NOT NULL,
    payment_method VARCHAR(50) NOT NULL, -- Cash, Card, E-wallet, Bank Transfer, Credit
    reference_number VARCHAR(255),
    notes TEXT,
    received_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_payments_invoice ON payments(invoice_id);
CREATE INDEX idx_payments_date ON payments(payment_date);
```

### 4.5 Quotations Module

```sql
-- Quotations Table
CREATE TABLE quotations (
    quotation_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    quotation_number VARCHAR(50) UNIQUE NOT NULL, -- QUO-2024-0001
    job_id UUID REFERENCES jobs(job_id),
    customer_id UUID REFERENCES customers(customer_id) ON DELETE RESTRICT,
    quotation_date DATE NOT NULL DEFAULT CURRENT_DATE,
    expiry_date DATE,
    subtotal DECIMAL(10,2) NOT NULL DEFAULT 0.00,
    tax_rate DECIMAL(5,2) DEFAULT 0.00,
    tax_amount DECIMAL(10,2) GENERATED ALWAYS AS (subtotal * tax_rate / 100) STORED,
    discount_amount DECIMAL(10,2) DEFAULT 0.00,
    total_amount DECIMAL(10,2) GENERATED ALWAYS AS (subtotal + (subtotal * tax_rate / 100) - discount_amount) STORED,
    status VARCHAR(50) DEFAULT 'Pending', -- Pending, Approved, Rejected, Expired, Converted
    customer_response TEXT,
    response_date TIMESTAMP,
    converted_to_invoice_id UUID REFERENCES invoices(invoice_id),
    notes TEXT,
    sent_via_whatsapp BOOLEAN DEFAULT FALSE,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_quotations_customer ON quotations(customer_id);
CREATE INDEX idx_quotations_job ON quotations(job_id);
CREATE INDEX idx_quotations_status ON quotations(status);
CREATE INDEX idx_quotations_date ON quotations(quotation_date);

-- Quotation Line Items
CREATE TABLE quotation_items (
    item_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    quotation_id UUID REFERENCES quotations(quotation_id) ON DELETE CASCADE,
    item_type VARCHAR(50) NOT NULL,
    description TEXT NOT NULL,
    quantity DECIMAL(10,2) NOT NULL DEFAULT 1,
    unit_price DECIMAL(10,2) NOT NULL,
    total_price DECIMAL(10,2) GENERATED ALWAYS AS (quantity * unit_price) STORED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_quotation_items_quotation ON quotation_items(quotation_id);
```

### 4.6 Inventory Module

```sql
-- Inventory Table
CREATE TABLE inventory (
    inventory_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    sku VARCHAR(100) UNIQUE NOT NULL,
    product_name VARCHAR(255) NOT NULL,
    description TEXT,
    category VARCHAR(100),
    subcategory VARCHAR(100),
    quantity_on_hand INTEGER NOT NULL DEFAULT 0,
    reorder_level INTEGER DEFAULT 10,
    unit_cost DECIMAL(10,2) NOT NULL,
    selling_price DECIMAL(10,2) NOT NULL,
    supplier_id UUID REFERENCES suppliers(supplier_id),
    location VARCHAR(100),
    barcode VARCHAR(100),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_inventory_sku ON inventory(sku);
CREATE INDEX idx_inventory_name ON inventory(product_name);
CREATE INDEX idx_inventory_category ON inventory(category);
CREATE INDEX idx_inventory_active ON inventory(is_active);

-- Stock Movements
CREATE TABLE stock_movements (
    movement_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    inventory_id UUID REFERENCES inventory(inventory_id) ON DELETE RESTRICT,
    movement_type VARCHAR(50) NOT NULL, -- Purchase, Sale, Adjustment, Return, Transfer
    quantity INTEGER NOT NULL, -- Positive for IN, Negative for OUT
    reference_id UUID, -- Links to invoice, purchase_order, etc
    reference_type VARCHAR(50), -- Invoice, PurchaseOrder, Adjustment
    notes TEXT,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_stock_movements_inventory ON stock_movements(inventory_id);
CREATE INDEX idx_stock_movements_type ON stock_movements(movement_type);
CREATE INDEX idx_stock_movements_date ON stock_movements(created_at);

-- Suppliers
CREATE TABLE suppliers (
    supplier_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    supplier_name VARCHAR(255) NOT NULL,
    contact_person VARCHAR(255),
    phone_number VARCHAR(20),
    email VARCHAR(255),
    address TEXT,
    city VARCHAR(100),
    state VARCHAR(100),
    postcode VARCHAR(10),
    notes TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_suppliers_name ON suppliers(supplier_name);
CREATE INDEX idx_suppliers_active ON suppliers(is_active);

-- Purchase Orders
CREATE TABLE purchase_orders (
    po_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    po_number VARCHAR(50) UNIQUE NOT NULL, -- PO-2024-0001
    supplier_id UUID REFERENCES suppliers(supplier_id),
    order_date DATE DEFAULT CURRENT_DATE,
    expected_delivery_date DATE,
    actual_delivery_date DATE,
    total_amount DECIMAL(10,2) NOT NULL DEFAULT 0.00,
    status VARCHAR(50) DEFAULT 'Pending', -- Pending, Ordered, Received, Cancelled
    notes TEXT,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_purchase_orders_supplier ON purchase_orders(supplier_id);
CREATE INDEX idx_purchase_orders_status ON purchase_orders(status);
CREATE INDEX idx_purchase_orders_date ON purchase_orders(order_date);

-- Purchase Order Items
CREATE TABLE purchase_order_items (
    po_item_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    po_id UUID REFERENCES purchase_orders(po_id) ON DELETE CASCADE,
    inventory_id UUID REFERENCES inventory(inventory_id),
    quantity_ordered INTEGER NOT NULL,
    quantity_received INTEGER DEFAULT 0,
    unit_cost DECIMAL(10,2) NOT NULL,
    total_cost DECIMAL(10,2) GENERATED ALWAYS AS (quantity_ordered * unit_cost) STORED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_po_items_po ON purchase_order_items(po_id);
```

### 4.7 WhatsApp Module

```sql
-- WhatsApp Sessions
CREATE TABLE whatsapp_sessions (
    session_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_name VARCHAR(100) UNIQUE NOT NULL,
    phone_number VARCHAR(20),
    status VARCHAR(50) DEFAULT 'Disconnected', -- Connected, Disconnected, Connecting
    qr_code TEXT,
    last_connected_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- WhatsApp Messages Log
CREATE TABLE whatsapp_messages (
    message_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    customer_id UUID REFERENCES customers(customer_id),
    phone_number VARCHAR(20) NOT NULL,
    message_type VARCHAR(50) NOT NULL, -- Incoming, Outgoing
    message_content TEXT,
    media_url TEXT,
    media_type VARCHAR(50), -- Image, Video, Document, Audio
    message_status VARCHAR(50), -- Sent, Delivered, Read, Failed
    whatsapp_message_id VARCHAR(255), -- ID from WhatsApp
    campaign_id UUID REFERENCES campaigns(campaign_id),
    job_id UUID REFERENCES jobs(job_id),
    is_bot_reply BOOLEAN DEFAULT FALSE,
    is_ai_generated BOOLEAN DEFAULT FALSE,
    sent_at TIMESTAMP,
    delivered_at TIMESTAMP,
    read_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_whatsapp_messages_customer ON whatsapp_messages(customer_id);
CREATE INDEX idx_whatsapp_messages_phone ON whatsapp_messages(phone_number);
CREATE INDEX idx_whatsapp_messages_type ON whatsapp_messages(message_type);
CREATE INDEX idx_whatsapp_messages_campaign ON whatsapp_messages(campaign_id);
CREATE INDEX idx_whatsapp_messages_job ON whatsapp_messages(job_id);
CREATE INDEX idx_whatsapp_messages_date ON whatsapp_messages(created_at);

-- Broadcast Campaigns
CREATE TABLE campaigns (
    campaign_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    campaign_name VARCHAR(255) NOT NULL,
    campaign_type VARCHAR(50) DEFAULT 'Promotional', -- Promotional, Reminder, Notification
    message_template TEXT NOT NULL,
    media_url TEXT,
    media_type VARCHAR(50),
    target_audience VARCHAR(50) DEFAULT 'All', -- All, VIP, Regular, Custom
    filter_criteria JSONB, -- Store complex filter rules
    scheduled_at TIMESTAMP,
    status VARCHAR(50) DEFAULT 'Draft', -- Draft, Scheduled, Running, Completed, Cancelled
    total_recipients INTEGER DEFAULT 0,
    total_sent INTEGER DEFAULT 0,
    total_delivered INTEGER DEFAULT 0,
    total_read INTEGER DEFAULT 0,
    total_failed INTEGER DEFAULT 0,
    started_at TIMESTAMP,
    completed_at TIMESTAMP,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_campaigns_status ON campaigns(status);
CREATE INDEX idx_campaigns_scheduled ON campaigns(scheduled_at);
CREATE INDEX idx_campaigns_created_by ON campaigns(created_by);

-- Campaign Recipients
CREATE TABLE campaign_recipients (
    recipient_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    campaign_id UUID REFERENCES campaigns(campaign_id) ON DELETE CASCADE,
    customer_id UUID REFERENCES customers(customer_id),
    phone_number VARCHAR(20) NOT NULL,
    status VARCHAR(50) DEFAULT 'Pending', -- Pending, Sent, Delivered, Read, Failed
    sent_at TIMESTAMP,
    delivered_at TIMESTAMP,
    read_at TIMESTAMP,
    error_message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_campaign_recipients_campaign ON campaign_recipients(campaign_id);
CREATE INDEX idx_campaign_recipients_customer ON campaign_recipients(customer_id);
CREATE INDEX idx_campaign_recipients_status ON campaign_recipients(status);

-- Message Templates
CREATE TABLE message_templates (
    template_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    template_name VARCHAR(255) NOT NULL,
    template_category VARCHAR(100), -- Greeting, Quotation, Invoice, Reminder, etc
    template_content TEXT NOT NULL,
    variables JSONB, -- Available variables like {nama}, {model}, etc
    is_active BOOLEAN DEFAULT TRUE,
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_templates_category ON message_templates(template_category);
CREATE INDEX idx_templates_active ON message_templates(is_active);

-- WhatsApp Reminders
CREATE TABLE whatsapp_reminders (
    reminder_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    job_id UUID REFERENCES jobs(job_id) ON DELETE CASCADE,
    customer_id UUID REFERENCES customers(customer_id),
    reminder_type VARCHAR(50) NOT NULL, -- QuotationFollowup, PaymentDue, JobComplete
    reminder_count INTEGER DEFAULT 0, -- 0, 1, 2, 3
    last_sent_at TIMESTAMP,
    next_send_at TIMESTAMP,
    status VARCHAR(50) DEFAULT 'Pending', -- Pending, Sent, Completed, Cancelled
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_reminders_job ON whatsapp_reminders(job_id);
CREATE INDEX idx_reminders_status ON whatsapp_reminders(status);
CREATE INDEX idx_reminders_next_send ON whatsapp_reminders(next_send_at);
```

### 4.8 Users & Authentication Module

```sql
-- Users Table
CREATE TABLE users (
    user_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    username VARCHAR(100) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    full_name VARCHAR(255) NOT NULL,
    role VARCHAR(50) NOT NULL DEFAULT 'Staff', -- Admin, Manager, Technician, Staff, Cashier
    phone_number VARCHAR(20),
    is_active BOOLEAN DEFAULT TRUE,
    last_login_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_users_active ON users(is_active);

-- User Sessions
CREATE TABLE user_sessions (
    session_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
    token VARCHAR(500) UNIQUE NOT NULL,
    ip_address VARCHAR(50),
    user_agent TEXT,
    expires_at TIMESTAMP NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_user_sessions_user ON user_sessions(user_id);
CREATE INDEX idx_user_sessions_token ON user_sessions(token);
CREATE INDEX idx_user_sessions_expires ON user_sessions(expires_at);

-- Activity Logs
CREATE TABLE activity_logs (
    log_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(user_id),
    action VARCHAR(100) NOT NULL, -- Login, Create, Update, Delete, etc
    entity_type VARCHAR(50), -- Job, Invoice, Customer, etc
    entity_id UUID,
    description TEXT,
    ip_address VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_activity_logs_user ON activity_logs(user_id);
CREATE INDEX idx_activity_logs_action ON activity_logs(action);
CREATE INDEX idx_activity_logs_entity ON activity_logs(entity_type, entity_id);
CREATE INDEX idx_activity_logs_date ON activity_logs(created_at);
```

### 4.9 System Settings Module

```sql
-- System Settings
CREATE TABLE system_settings (
    setting_id SERIAL PRIMARY KEY,
    setting_key VARCHAR(100) UNIQUE NOT NULL,
    setting_value TEXT,
    setting_type VARCHAR(50) DEFAULT 'String', -- String, Number, Boolean, JSON
    description TEXT,
    is_public BOOLEAN DEFAULT FALSE, -- Can be accessed by frontend
    updated_by UUID REFERENCES users(user_id),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_system_settings_key ON system_settings(setting_key);

-- Sample settings:
-- openai_api_key, whatsapp_anti_ban_enabled, daily_message_limit,
-- tax_rate, currency, business_name, business_email, etc.

-- Notifications
CREATE TABLE notifications (
    notification_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(user_id),
    notification_type VARCHAR(50) NOT NULL, -- Info, Warning, Error, Success
    title VARCHAR(255) NOT NULL,
    message TEXT,
    link_url VARCHAR(500),
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_notifications_user ON notifications(user_id);
CREATE INDEX idx_notifications_read ON notifications(is_read);
CREATE INDEX idx_notifications_date ON notifications(created_at);
```

---

## 5. RELATIONSHIPS DIAGRAM

```
customers (1) ─────────< (∞) devices
    │
    ├─────────< (∞) jobs
    │               │
    │               ├─────< (∞) job_photos
    │               ├─────< (∞) job_parts
    │               └─────< (∞) job_labor
    │
    ├─────────< (∞) invoices
    │               └─────< (∞) invoice_items
    │
    ├─────────< (∞) quotations
    │               └─────< (∞) quotation_items
    │
    ├─────────< (∞) whatsapp_messages
    └─────────< (∞) campaign_recipients

users (1) ─────────< (∞) jobs (as technician)
    │
    ├─────────< (∞) invoices (as creator)
    ├─────────< (∞) campaigns (as creator)
    ├─────────< (∞) activity_logs
    └─────────< (∞) user_sessions

inventory (1) ─────< (∞) stock_movements
    │
    ├─────────< (∞) job_parts
    └─────────< (∞) purchase_order_items

suppliers (1) ─────< (∞) purchase_orders
    │                   └─────< (∞) purchase_order_items
    └─────────< (∞) inventory

campaigns (1) ──────< (∞) campaign_recipients
    └─────────< (∞) whatsapp_messages

jobs (1) ───────────< (∞) whatsapp_messages
    └───────────< (∞) whatsapp_reminders
```

---

## 6. API ENDPOINTS (Backend)

### Authentication
```
POST   /api/auth/login
POST   /api/auth/logout
POST   /api/auth/refresh
GET    /api/auth/me
```

### Customers
```
GET    /api/customers
GET    /api/customers/:id
POST   /api/customers
PUT    /api/customers/:id
DELETE /api/customers/:id
GET    /api/customers/:id/history
```

### Jobs
```
GET    /api/jobs
GET    /api/jobs/:id
POST   /api/jobs
PUT    /api/jobs/:id
DELETE /api/jobs/:id
POST   /api/jobs/:id/photos
PUT    /api/jobs/:id/status
POST   /api/jobs/:id/quotation
```

### Invoices
```
GET    /api/invoices
GET    /api/invoices/:id
POST   /api/invoices
PUT    /api/invoices/:id
DELETE /api/invoices/:id
GET    /api/invoices/:id/pdf
POST   /api/invoices/:id/send-whatsapp
```

### WhatsApp
```
GET    /api/whatsapp/status
POST   /api/whatsapp/connect
POST   /api/whatsapp/disconnect
POST   /api/whatsapp/send-message
GET    /api/whatsapp/messages
POST   /api/whatsapp/generate-qr
```

### Campaigns
```
GET    /api/campaigns
GET    /api/campaigns/:id
POST   /api/campaigns
PUT    /api/campaigns/:id
DELETE /api/campaigns/:id
POST   /api/campaigns/:id/start
POST   /api/campaigns/:id/cancel
GET    /api/campaigns/:id/analytics
```

### Inventory
```
GET    /api/inventory
GET    /api/inventory/:id
POST   /api/inventory
PUT    /api/inventory/:id
DELETE /api/inventory/:id
POST   /api/inventory/:id/adjust-stock
GET    /api/inventory/low-stock
```

### Reports
```
GET    /api/reports/sales
GET    /api/reports/revenue
GET    /api/reports/jobs
GET    /api/reports/inventory
GET    /api/reports/whatsapp-analytics
```

---

## 7. ENVIRONMENT VARIABLES

```env
# Database
DATABASE_URL=postgresql://user:password@localhost:5432/whatsapp_crm
DATABASE_POOL_SIZE=20

# Server
NODE_ENV=production
PORT=3000
API_BASE_URL=http://localhost:3000

# JWT
JWT_SECRET=your-secret-key-here
JWT_EXPIRY=7d

# WhatsApp (Baileys)
WHATSAPP_SESSION_PATH=./whatsapp-sessions
WHATSAPP_WEBHOOK_URL=http://localhost:3000/webhook/whatsapp

# OpenAI
OPENAI_API_KEY=sk-xxxxxxxxxxxx
OPENAI_MODEL=gpt-4
OPENAI_MAX_TOKENS=500

# Anti-Ban Settings
WHATSAPP_DAILY_LIMIT=150
WHATSAPP_MIN_DELAY=30
WHATSAPP_MAX_DELAY=60
WHATSAPP_BUSINESS_HOURS_START=9
WHATSAPP_BUSINESS_HOURS_END=18

# File Upload
MAX_FILE_SIZE=10485760
UPLOAD_PATH=./uploads

# Email (Optional)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-password

# Backup
BACKUP_PATH=./backups
BACKUP_RETENTION_DAYS=30
```

---

## 8. DEPLOYMENT DOCKER COMPOSE

```yaml
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: whatsapp_crm
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped

  backend:
    build: ./backend
    environment:
      DATABASE_URL: postgresql://admin:secure_password@postgres:5432/whatsapp_crm
      NODE_ENV: production
    volumes:
      - ./whatsapp-sessions:/app/whatsapp-sessions
      - ./uploads:/app/uploads
      - ./backups:/app/backups
    ports:
      - "3001:3001"
    depends_on:
      - postgres
    restart: unless-stopped

  frontend:
    build: ./frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
```

---

## 9. KESELAMATAN (SECURITY)

### Authentication & Authorization
- JWT token-based authentication
- Role-based access control (RBAC)
- Password hashing dengan bcrypt
- Session management dengan expiry

### Data Protection
- Encrypt sensitive data (API keys, passwords)
- HTTPS/SSL untuk production
- Input validation & sanitization
- SQL injection prevention (Parameterized queries)
- XSS protection

### WhatsApp Security
- Secure session storage
- Rate limiting untuk prevent spam
- Message encryption (handled by Baileys)
- Phone number validation

### API Security
- CORS configuration
- Rate limiting per endpoint
- Request size limits
- API key rotation strategy

---

## 10. BACKUP STRATEGY

### Automated Backups
- **Daily**: Incremental backup at 2 AM
- **Weekly**: Full backup every Sunday
- **Monthly**: Archive backup

### Backup Components
- Database dump (PostgreSQL)
- Uploaded files (images, documents)
- WhatsApp session data
- Configuration files

### Restore Process
1. Stop all services
2. Restore database from backup
3. Restore files
4. Restart services
5. Verify data integrity

---

## 11. MONITORING & LOGGING

### Application Logs
- Error logs
- Access logs
- WhatsApp message logs
- Campaign execution logs
- Database query logs

### Metrics to Monitor
- API response times
- Database connection pool
- WhatsApp connection status
- Message delivery rate
- Failed job count
- System resource usage (CPU, RAM, Disk)

### Alerts
- WhatsApp disconnection
- Failed campaign
- Low stock alerts
- Payment due reminders
- System errors

---

## KESIMPULAN

Dokumentasi ini merangkumi:
- ✅ 5 Module utama dengan features lengkap
- ✅ User flow untuk setiap process
- ✅ Database schema lengkap untuk PostgreSQL
- ✅ API endpoints structure
- ✅ Deployment configuration
- ✅ Security & backup strategy

**Next Steps:**
1. Review & adjust schema mengikut keperluan
2. Setup development environment
3. Implement backend API
4. Build frontend UI
5. Integrate WhatsApp Baileys
6. Testing & deployment
