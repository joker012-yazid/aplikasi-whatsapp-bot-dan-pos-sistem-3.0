Hi, I need help building a WhatsApp Bot CRM System. 
Here's the complete master prompt with all requirements:

# MASTER PROMPT: WhatsApp Bot CRM System Development

## CONTEXT & OBJECTIVE
You are an expert full-stack developer tasked with building a comprehensive WhatsApp Bot-integrated CRM system for a laptop/PC/printer repair shop. This system automates customer service, repair job tracking, sales transactions, and marketing campaigns through WhatsApp integration with AI capabilities.

## TECH STACK REQUIREMENTS
- **Frontend**: Next.js 14.x with TypeScript
- **UI Framework**: Shadcn/ui + Tailwind CSS
- **Backend**: Node.js 20.x LTS with TypeScript
- **Database**: PostgreSQL 15.x
- **Cache**: Redis 7.x
- **WhatsApp**: Baileys library (latest)
- **AI**: OpenAI GPT-4 API
- **Container**: Docker Compose
- **ORM**: Prisma (preferred) or TypeORM

## PROJECT STRUCTURE
```
/project-root
├── /apps
│   ├── /web                 # Next.js frontend
│   │   ├── /app            # App router
│   │   ├── /components     # React components
│   │   ├── /lib            # Utilities
│   │   └── /styles         # Global styles
│   └── /api                # Backend services
│       ├── /src
│       │   ├── /routes     # API routes
│       │   ├── /services   # Business logic
│       │   ├── /middleware # Auth, validation
│       │   └── /utils      # Helpers
│       └── /prisma         # Database schema
├── /packages
│   ├── /database           # Shared DB client
│   ├── /whatsapp           # WhatsApp service wrapper
│   └── /shared             # Common utilities
├── /docker
│   ├── Dockerfile.web
│   ├── Dockerfile.api
│   └── nginx.conf
├── docker-compose.yml
└── README.md
```

## CORE BUSINESS WORKFLOW

### Customer Journey (Based on SOP):
1. **Customer Drop-off**
   - Customer brings device to shop
   - Technician generates QR code
   - Customer scans QR → fills form (Name, Phone, Device Type, Model, T&C)
   - Bot sends confirmation WhatsApp
   
2. **Diagnosis & Quotation**
   - Technician examines device
   - Inputs problem description + repair cost
   - Bot sends quotation to customer via WhatsApp
   - System waits for customer approval
   
3. **Reminder System (if no response)**
   - Day 1: Send reminder 1
   - Day 20: Send reminder 2
   - Day 30: Send reminder 3
   
4. **Customer Decision**
   - **If Rejected**: Bot notifies customer can pick up device
   - **If Approved**: Bot confirms repair will proceed
   
5. **Repair Process**
   - Technician performs repair
   - Uploads progress photos → Bot sends to customer
   - Upon completion: Uploads final photos → Bot sends invoice + pickup notification
   
6. **Payment & Completion**
   - Customer arrives for pickup and pays
   - Technician marks as delivered
   - Bot sends thank you + review request

## DATABASE SCHEMA (POSTGRESQL)

### Critical Tables (Must Implement First):

```sql
-- CUSTOMERS TABLE
CREATE TABLE customers (
    customer_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    phone_number VARCHAR(20) UNIQUE NOT NULL,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255),
    address TEXT,
    customer_type VARCHAR(20) DEFAULT 'Regular',
    total_visits INTEGER DEFAULT 0,
    total_spending DECIMAL(10,2) DEFAULT 0,
    opt_in_marketing BOOLEAN DEFAULT true,
    opt_in_whatsapp BOOLEAN DEFAULT true,
    tags TEXT[],
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_visit_date TIMESTAMP
);

-- DEVICES TABLE
CREATE TABLE devices (
    device_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    customer_id UUID REFERENCES customers(customer_id) ON DELETE CASCADE,
    device_type VARCHAR(50) NOT NULL,
    brand VARCHAR(100),
    model VARCHAR(255),
    serial_number VARCHAR(255),
    specifications JSONB,
    warranty_expiry DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- USERS TABLE (Staff)
CREATE TABLE users (
    user_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    username VARCHAR(100) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    full_name VARCHAR(255) NOT NULL,
    role VARCHAR(20) NOT NULL CHECK (role IN ('Admin', 'Technician', 'Cashier', 'Manager')),
    is_active BOOLEAN DEFAULT true,
    last_login TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- REPAIR JOBS TABLE (CORE)
CREATE TABLE repair_jobs (
    job_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    job_number VARCHAR(50) UNIQUE NOT NULL,
    customer_id UUID REFERENCES customers(customer_id) ON DELETE CASCADE,
    device_id UUID REFERENCES devices(device_id) ON DELETE SET NULL,
    assigned_technician_id UUID REFERENCES users(user_id) ON DELETE SET NULL,
    
    problem_description TEXT NOT NULL,
    diagnosis TEXT,
    solution_applied TEXT,
    
    status VARCHAR(30) DEFAULT 'Pending' CHECK (status IN (
        'Pending', 'Quoted', 'Approved', 'In Progress', 
        'Completed', 'Ready for Pickup', 'Delivered', 'Cancelled', 'Rejected'
    )),
    priority VARCHAR(20) DEFAULT 'Normal',
    
    date_received TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    date_quoted TIMESTAMP,
    date_approved TIMESTAMP,
    date_completed TIMESTAMP,
    date_delivered TIMESTAMP,
    estimated_completion_date DATE,
    
    parts_cost DECIMAL(10,2) DEFAULT 0,
    labor_cost DECIMAL(10,2) DEFAULT 0,
    additional_charges DECIMAL(10,2) DEFAULT 0,
    discount DECIMAL(10,2) DEFAULT 0,
    total_cost DECIMAL(10,2) GENERATED ALWAYS AS (
        parts_cost + labor_cost + additional_charges - discount
    ) STORED,
    
    customer_approved BOOLEAN DEFAULT false,
    approval_date TIMESTAMP,
    internal_notes TEXT,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- JOB PHOTOS TABLE
CREATE TABLE job_photos (
    photo_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    job_id UUID REFERENCES repair_jobs(job_id) ON DELETE CASCADE,
    photo_type VARCHAR(20) CHECK (photo_type IN ('Before', 'During', 'After')),
    photo_url TEXT NOT NULL,
    photo_path TEXT NOT NULL,
    description TEXT,
    uploaded_by UUID REFERENCES users(user_id),
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- WHATSAPP MESSAGES TABLE
CREATE TABLE whatsapp_messages (
    message_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    customer_id UUID REFERENCES customers(customer_id) ON DELETE CASCADE,
    job_id UUID REFERENCES repair_jobs(job_id) ON DELETE SET NULL,
    campaign_id UUID REFERENCES campaigns(campaign_id) ON DELETE SET NULL,
    
    message_type VARCHAR(20) CHECK (message_type IN ('Incoming', 'Outgoing', 'Template', 'Broadcast')),
    message_content TEXT NOT NULL,
    media_url TEXT,
    media_type VARCHAR(20),
    
    whatsapp_message_id VARCHAR(255),
    from_number VARCHAR(20),
    to_number VARCHAR(20),
    
    status VARCHAR(30) CHECK (status IN ('Pending', 'Sent', 'Delivered', 'Read', 'Failed', 'Replied')),
    
    sent_at TIMESTAMP,
    delivered_at TIMESTAMP,
    read_at TIMESTAMP,
    
    context_type VARCHAR(50),
    is_automated BOOLEAN DEFAULT false,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- REMINDERS TABLE
CREATE TABLE reminders (
    reminder_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    job_id UUID REFERENCES repair_jobs(job_id) ON DELETE CASCADE,
    customer_id UUID REFERENCES customers(customer_id) ON DELETE CASCADE,
    reminder_type VARCHAR(30) CHECK (reminder_type IN (
        'Quotation Response', 'Payment Due', 'Pickup Reminder', 'Follow-up'
    )),
    reminder_number INTEGER,
    scheduled_date TIMESTAMP NOT NULL,
    status VARCHAR(20) DEFAULT 'Pending' CHECK (status IN ('Pending', 'Sent', 'Cancelled')),
    message_id UUID REFERENCES whatsapp_messages(message_id),
    sent_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- CAMPAIGNS TABLE
CREATE TABLE campaigns (
    campaign_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    campaign_name VARCHAR(255) NOT NULL,
    campaign_type VARCHAR(30),
    message_template TEXT NOT NULL,
    media_url TEXT,
    
    target_audience JSONB,
    target_count INTEGER DEFAULT 0,
    
    status VARCHAR(20) DEFAULT 'Draft' CHECK (status IN (
        'Draft', 'Scheduled', 'Running', 'Paused', 'Completed', 'Cancelled'
    )),
    scheduled_date TIMESTAMP,
    started_at TIMESTAMP,
    completed_at TIMESTAMP,
    
    total_sent INTEGER DEFAULT 0,
    total_delivered INTEGER DEFAULT 0,
    total_read INTEGER DEFAULT 0,
    
    send_rate_limit INTEGER DEFAULT 100,
    delay_between_messages INTEGER DEFAULT 45,
    
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- PRODUCTS TABLE
CREATE TABLE products (
    product_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    sku VARCHAR(100) UNIQUE NOT NULL,
    product_name VARCHAR(255) NOT NULL,
    description TEXT,
    category VARCHAR(100),
    
    quantity_on_hand INTEGER DEFAULT 0,
    reorder_level INTEGER DEFAULT 10,
    
    unit_cost DECIMAL(10,2) NOT NULL,
    selling_price DECIMAL(10,2) NOT NULL,
    
    barcode VARCHAR(100),
    is_active BOOLEAN DEFAULT true,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- INVOICES TABLE
CREATE TABLE invoices (
    invoice_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    invoice_number VARCHAR(50) UNIQUE NOT NULL,
    invoice_type VARCHAR(20) CHECK (invoice_type IN ('Sale', 'Repair', 'Service')),
    customer_id UUID REFERENCES customers(customer_id) ON DELETE SET NULL,
    job_id UUID REFERENCES repair_jobs(job_id) ON DELETE SET NULL,
    
    invoice_date DATE NOT NULL DEFAULT CURRENT_DATE,
    due_date DATE,
    
    subtotal DECIMAL(10,2) NOT NULL,
    tax_rate DECIMAL(5,2) DEFAULT 0,
    tax_amount DECIMAL(10,2) DEFAULT 0,
    discount_amount DECIMAL(10,2) DEFAULT 0,
    total_amount DECIMAL(10,2) NOT NULL,
    
    payment_status VARCHAR(20) DEFAULT 'Unpaid' CHECK (payment_status IN (
        'Unpaid', 'Partial', 'Paid', 'Overdue', 'Cancelled'
    )),
    amount_paid DECIMAL(10,2) DEFAULT 0,
    balance_due DECIMAL(10,2) GENERATED ALWAYS AS (total_amount - amount_paid) STORED,
    
    created_by UUID REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- INVOICE ITEMS TABLE
CREATE TABLE invoice_items (
    item_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    invoice_id UUID REFERENCES invoices(invoice_id) ON DELETE CASCADE,
    product_id UUID REFERENCES products(product_id) ON DELETE SET NULL,
    item_type VARCHAR(20) CHECK (item_type IN ('Product', 'Service', 'Labor', 'Parts')),
    description TEXT NOT NULL,
    quantity DECIMAL(10,2) NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    total_price DECIMAL(10,2) GENERATED ALWAYS AS (quantity * unit_price) STORED
);

-- PAYMENTS TABLE
CREATE TABLE payments (
    payment_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    invoice_id UUID REFERENCES invoices(invoice_id) ON DELETE CASCADE,
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    amount DECIMAL(10,2) NOT NULL,
    payment_method VARCHAR(30) CHECK (payment_method IN (
        'Cash', 'Card', 'Online Transfer', 'E-Wallet', 'Credit', 'Cheque'
    )),
    reference_number VARCHAR(100),
    notes TEXT,
    processed_by UUID REFERENCES users(user_id)
);

-- AI CONVERSATIONS TABLE
CREATE TABLE ai_conversations (
    conversation_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    customer_id UUID REFERENCES customers(customer_id) ON DELETE CASCADE,
    session_id VARCHAR(255) NOT NULL,
    user_message TEXT NOT NULL,
    ai_response TEXT NOT NULL,
    context_data JSONB,
    intent VARCHAR(100),
    confidence_score DECIMAL(3,2),
    was_helpful BOOLEAN,
    required_human_intervention BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- SETTINGS TABLE
CREATE TABLE settings (
    setting_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    category VARCHAR(50) NOT NULL,
    setting_key VARCHAR(100) NOT NULL,
    setting_value TEXT,
    data_type VARCHAR(20) CHECK (data_type IN ('string', 'number', 'boolean', 'json')),
    is_encrypted BOOLEAN DEFAULT false,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(category, setting_key)
);

-- AUDIT LOGS TABLE
CREATE TABLE audit_logs (
    log_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(user_id) ON DELETE SET NULL,
    action VARCHAR(50) NOT NULL,
    entity_type VARCHAR(50),
    entity_id UUID,
    old_values JSONB,
    new_values JSONB,
    ip_address VARCHAR(45),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- AUTO-UPDATE TRIGGER
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply to relevant tables
CREATE TRIGGER update_customers_updated_at BEFORE UPDATE ON customers
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_repair_jobs_updated_at BEFORE UPDATE ON repair_jobs
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON products
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_invoices_updated_at BEFORE UPDATE ON invoices
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_campaigns_updated_at BEFORE UPDATE ON campaigns
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- CREATE INDEXES
CREATE INDEX idx_customers_phone ON customers(phone_number);
CREATE INDEX idx_jobs_customer ON repair_jobs(customer_id);
CREATE INDEX idx_jobs_status ON repair_jobs(status);
CREATE INDEX idx_jobs_date_received ON repair_jobs(date_received);
CREATE INDEX idx_messages_customer ON whatsapp_messages(customer_id);
CREATE INDEX idx_messages_job ON whatsapp_messages(job_id);
CREATE INDEX idx_reminders_scheduled ON reminders(scheduled_date);
CREATE INDEX idx_invoices_customer ON invoices(customer_id);
```

## CORE FEATURES REQUIREMENTS

### 1. WHATSAPP BOT SYSTEM

#### A. QR Code Registration
```typescript
// Required functionality:
- Generate unique QR code per job
- QR redirects to web form: /register/{unique_token}
- Form captures: name, phone, device_type, model
- Auto-create customer if new (based on phone)
- Create device record
- Create job record with status 'Pending'
- Send WhatsApp confirmation message
```

#### B. AI Chat Integration
```typescript
// OpenAI Integration Requirements:
- Detect customer intent
- Query database for context (customer history, job status)
- Provide automated responses for common queries
- Fallback to technician if:
  * Confidence score < 0.7
  * Request outside knowledge base
  * Customer explicitly requests human
- Log all conversations
```

#### C. Automated Messages (Template System)
```
Message Types Required:
1. Confirmation: "Terima kasih {name}, barang anda akan dicek sebentar lagi"
2. Quotation: "Masalah: {diagnosis}\nKos repair: RM{amount}\nSila reply 'SETUJU' atau 'TAK SETUJU'"
3. Approved: "Laptop anda akan dibaiki. Tunggu update dari kami"
4. Rejected: "Boleh ambil semula laptop. Bila nak datang?"
5. Progress Update: "Update repair: {description}" + photos
6. Completion: "Laptop siap! Boleh ambil sekarang" + invoice
7. Thank You: "Terima kasih! Tolong bagi review: {link}"
8. Reminders: Day 1, 20, 30 messages
```

#### D. Smart Reminder System
```typescript
// Cron job requirements:
- Check jobs with status='Quoted' and no response
- If current_date - date_quoted >= 1 day → Send Reminder 1
- If current_date - date_quoted >= 20 days → Send Reminder 2
- If current_date - date_quoted >= 30 days → Send Reminder 3
- Update reminder records
```

### 2. WHATSAPP BLASTER (ANTI-BAN)

#### Anti-Ban Implementation
```typescript
// Critical Requirements:
const ANTI_BAN_CONFIG = {
  dailyLimit: 150,                    // Max messages per day
  minDelay: 30000,                    // 30 seconds
  maxDelay: 60000,                    // 60 seconds
  businessHoursStart: 9,              // 9 AM
  businessHoursEnd: 18,               // 6 PM
  typingSimulation: true,             // Simulate human typing
  randomDelayVariance: 0.3,           // 30% variance
  sessionRotation: true,              // Rotate sessions if multiple
  respectOptOut: true                 // Skip opted-out customers
};

// Implementation:
- Random delay between messages
- Check daily limit before sending
- Only send during business hours
- Personalize each message (no bulk identical messages)
- Track delivery status
- Handle failures gracefully
- Implement exponential backoff on errors
```

#### Campaign Management
```typescript
// Required features:
- Create campaign with target filters
- Preview before send
- Schedule for later
- Track metrics: sent, delivered, read, replied
- Pause/resume functionality
- Blacklist management
- Variable substitution: {nama}, {model}, etc.
```

### 3. POS SYSTEM

#### Transaction Processing
```typescript
// Required flows:
1. New Sale Transaction:
   - Add items (search/scan)
   - Calculate subtotal, tax, total
   - Apply discount
   - Process payment (multiple methods)
   - Generate invoice
   - Update inventory
   - Send invoice via WhatsApp

2. Repair Job Invoice:
   - Auto-populate from job details
   - Include parts + labor
   - Generate invoice
   - Link to job_id
   - Send to customer
```

#### Inventory Management
```typescript
// Required features:
- Real-time stock tracking
- Low stock alerts (<= reorder_level)
- Stock movement logging
- Manual stock adjustment with reason
- Product search (name, SKU, barcode)
- Category management
```

### 4. ADMIN DASHBOARD

#### Dashboard Widgets (Real-time)
```typescript
// Metrics to display:
- Today's Revenue: SUM(invoices WHERE date=today AND status='Paid')
- Pending Jobs: COUNT(jobs WHERE status IN ('Pending', 'Quoted'))
- Active Jobs: COUNT(jobs WHERE status='In Progress')
- New Customers: COUNT(customers WHERE created_at >= today)
- Pending Reminders: COUNT(reminders WHERE status='Pending')
- Low Stock Items: COUNT(products WHERE quantity <= reorder_level)

// Recent Activities:
- Latest WhatsApp messages (5)
- Recent job updates (5)
- Recent transactions (5)
```

#### Settings Page
```typescript
// Configuration sections:
1. WhatsApp Connection:
   - Display QR code for pairing
   - Connection status
   - Reconnect button
   - Session info

2. OpenAI Settings:
   - API key input (encrypted)
   - Model selection
   - Max tokens
   - Temperature
   - Test connection

3. Business Settings:
   - Company name, address
   - Tax rate
   - Currency
   - Business hours
   - Terms & conditions

4. User Management:
   - Add/edit users
   - Assign roles
   - Set permissions

5. Backup/Restore:
   - Manual backup trigger
   - Restore from file
   - Scheduled backup settings
   - View backup history
```

## DEVELOPMENT PHASES

### PHASE 1: Foundation (Week 1-2)
**Priority: HIGH**

1. **Setup Project Structure**
   ```bash
   # Initialize monorepo
   - Setup Next.js app
   - Setup Node.js API
   - Configure TypeScript
   - Setup Prisma
   - Create Docker Compose
   ```

2. **Database Setup**
   - Create all tables
   - Setup migrations
   - Seed initial data (admin user, settings)
   - Test connections

3. **Authentication System**
   - JWT implementation
   - Login/logout endpoints
   - Role-based middleware
   - Session management with Redis

4. **Basic UI Structure**
   - Layout components
   - Navigation
   - Dashboard skeleton
   - Theme toggle (light/dark)

### PHASE 2: Core Features (Week 3-4)
**Priority: HIGH**

1. **Customer Management**
   - CRUD operations
   - Customer list with search/filter
   - Customer profile page
   - Device registration

2. **Repair Job Management**
   - Create job with QR code
   - Job listing (all, pending, active, completed)
   - Job detail view
   - Status update workflow
   - Photo upload

3. **WhatsApp Integration (Basic)**
   - Baileys setup
   - QR code authentication
   - Send/receive messages
   - Message logging
   - Basic templates

### PHASE 3: Automation (Week 5-6)
**Priority: HIGH**

1. **AI Integration**
   - OpenAI service wrapper
   - Context building from database
   - Intent detection
   - Response generation
   - Fallback logic

2. **Automated Workflows**
   - Job status triggers
   - Template message sending
   - Quotation delivery
   - Invoice delivery
   - Completion notification

3. **Reminder System**
   - Cron job setup
   - Reminder scheduling
   - Reminder delivery
   - Response tracking

### PHASE 4: Sales & Inventory (Week 7-8)
**Priority: MEDIUM**

1. **POS System**
   - Transaction UI
   - Item search/add
   - Payment processing
   - Invoice generation (PDF)
   - Receipt printing

2. **Inventory Management**
   - Product CRUD
   - Stock tracking
   - Low stock alerts
   - Stock adjustments

3. **Invoice & Payment**
   - Invoice listing
   - Payment recording
   - Payment history
   - Outstanding balance tracking

### PHASE 5: Marketing (Week 9-10)
**Priority: MEDIUM**

1. **Campaign Management**
   - Campaign creation UI
   - Target audience builder
   - Message composer with variables
   - Media upload
   - Schedule/send functionality

2. **Anti-Ban Implementation**
   - Rate limiting
   - Random delays
   - Business hours check
   - Session rotation
   - Delivery tracking

3. **Analytics Dashboard**
   - Campaign metrics
   - Delivery rates
   - Response tracking
   - Customer engagement

### PHASE 6: Reports & Polish (Week 11-12)
**Priority: LOW**

1. **Reporting System**
   - Sales reports
   - Job completion reports
   - Customer analytics
   - Inventory reports
   - WhatsApp performance

2. **System Settings**
   - All configuration pages
   - Backup/restore functionality
   - System logs viewer
   - Update mechanism

3. **Testing & Optimization**
   - Unit tests
   - Integration tests
   - Performance optimization
   - Security audit
   - Bug fixes

## API ENDPOINTS (Must Implement)

### Authentication
```
POST   /api/auth/login
POST   /api/auth/logout
POST   /api/auth/refresh
GET    /api/auth/me
```

### Customers
```
GET    /api/customers              # List with pagination
GET    /api/customers/:id          # Single customer
POST   /api/customers              # Create
PUT    /api/customers/:id          # Update
DELETE /api/customers/:id          # Delete
GET    /api/customers/:id/jobs     # Customer job history
GET    /api/customers/:id/devices  # Customer devices
```

### Repair Jobs
```
GET    /api/jobs                   # List with filters
GET    /api/jobs/:id               # Single job
POST   /api/jobs                   # Create (with QR)
PUT    /api/jobs/:id               # Update
PATCH  /api/jobs/:id/status        # Update status
POST   /api/jobs/:id/photos        # Upload photos
POST   /api/jobs/:id/quotation     # Submit quotation
POST   /api/jobs/:id/approve       # Customer approve
POST   /api/jobs/:id/reject        # Customer reject
GET    /api/jobs/qr/:token         # Get job by QR token
```

### WhatsApp
```
GET    /api/whatsapp/status        # Connection status
GET    /api/whatsapp/qr            # Get QR for pairing
POST   /api/whatsapp/send          # Send message
POST   /api/whatsapp/send-media    # Send with media
GET    /api/whatsapp/messages      # Message history
POST   /api/whatsapp/disconnect    # Disconnect
```

### Campaigns
```
GET    /api/campaigns              # List campaigns
POST   /api/campaigns              # Create
PUT    /api/campaigns/:id          # Update
POST   /api/campaigns/:id/start    # Start campaign
POST   /api/campaigns/:id/pause    # Pause campaign
GET    /api/campaigns/:id/stats    # Campaign statistics
```

### Invoices & Payments
```
GET    /api/invoices               # List
POST   /api/invoices               # Create
GET    /api/invoices/:id           # Single
GET    /api/invoices/:id/pdf       # Generate PDF
POST   /api/invoices/:id/send      # Send via WhatsApp
POST   /api/payments               # Record payment
```

### Products/Inventory
```
GET    /api/products               # List
POST   /api/products               # Create
PUT    /api/products/:id           # Update
GET    /api/products/low-stock     # Low stock items
POST   /api/products/:id/adjust    # Adjust stock
```

### Dashboard & Reports
```
GET    /api/dashboard/stats        # Dashboard metrics
GET    /api/reports/sales          # Sales report
GET    /api/reports/jobs           # Job report
GET    /api/reports/customers      # Customer analytics
GET    /api/reports/inventory      # Inventory report
```

## ENVIRONMENT VARIABLES TEMPLATE

```env
# Application
NODE_ENV=production
PORT=3000
API_URL=http://localhost:3000/api
FRONTEND_URL=http://localhost:3000

# Database
DATABASE_URL=postgresql://user:password@localhost:5432/whatsapp_crm
REDIS_URL=redis://localhost:6379

# JWT
JWT_SECRET=your-super-secret-jwt-key-change-this
JWT_EXPIRES_IN=7d
REFRESH_TOKEN_SECRET=your-refresh-token-secret
REFRESH_TOKEN_EXPIRES_IN=30d

# WhatsApp (Baileys)
WHATSAPP_SESSION_PATH=./sessions/whatsapp
WHATSAPP_MAX_RETRY=3
WHATSAPP_BUSINESS_HOURS_START=9
WHATSAPP_BUSINESS_HOURS_END=18

# Anti-Ban Settings
WHATSAPP_DAILY_LIMIT=150
WHATSAPP_MIN_DELAY=30
WHATSAPP_MAX_DELAY=60
WHATSAPP_ENABLE_ANTI_BAN=true

# OpenAI
OPENAI_API_KEY=sk-your-openai-api-key
OPENAI_MODEL=gpt-4
OPENAI_MAX_TOKENS=500
OPENAI_TEMPERATURE=0.7

# File Upload
UPLOAD_DIR=./uploads
MAX_FILE_SIZE=10485760
ALLOWED_FILE_TYPES=image/jpeg,image/png,image/jpg,application/pdf

# Email (Optional - for notifications)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# Backup
BACKUP_DIR=./backups
BACKUP_SCHEDULE=0 2 * * *
BACKUP_RETENTION_DAYS=30

# Security
BCRYPT_ROUNDS=10
RATE_LIMIT_WINDOW=15
RATE_LIMIT_MAX_REQUESTS=100

# Others
TIMEZONE=Asia/Kuala_Lumpur
DEFAULT_LANGUAGE=ms
CURRENCY=MYR
TAX_RATE=0.00
```

## CRITICAL IMPLEMENTATION NOTES

### 1. WhatsApp Session Management
```typescript
// NEVER use localStorage/sessionStorage in frontend for WhatsApp
// Store session data in backend filesystem or database
// Use baileys' multi-device support
// Implement reconnection logic with exponential backoff
```

### 2. Message Queue System
```typescript
// Use Bull Queue with Redis for:
- Scheduled messages (reminders)
- Campaign messages (rate-limited)
- Retry failed messages
- Background jobs (PDF generation, etc.)
```

### 3. Real-time Updates
```typescript
// Implement Socket.io for:
- Live WhatsApp messages in dashboard
- Job status updates
- New customer notifications
- Real-time campaign progress
```

### 4. Security Best Practices
```typescript
// MUST implement:
- Input validation (Zod/Yup)
- SQL injection prevention (use ORM)
- XSS protection
- CSRF tokens
- Rate limiting
- Password hashing (bcrypt, 10+ rounds)
- Encrypted API keys in database
```

### 5. Error Handling
```typescript
// Implement comprehensive error handling:
- Try-catch blocks
- Error logging to file/service
- User-friendly error messages
- WhatsApp failure fallbacks
- Database transaction rollbacks
```

## TESTING REQUIREMENTS

### Unit Tests (Minimum 60% Coverage)
```typescript
// Test all:
- API endpoints
- Service functions
- Utility functions
- Database queries
```

### Integration Tests
```typescript
// Test:
- Complete user flows
- WhatsApp message sending
- Job creation to completion
- Payment processing
- Campaign execution
```

### E2E Tests (Critical Paths)
```typescript
// Test:
- Customer registration via QR
- Full repair job workflow
- Invoice generation and payment
- Campaign creation and sending
```

## DEPLOYMENT CHECKLIST

```bash
# Pre-deployment:
□ Environment variables configured
□ Database migrated and seeded
□ Redis server running and accessible
□ SSL certificates obtained
□ Domain configured
□ Backup strategy tested
□ WhatsApp session initialized
□ OpenAI API tested
□ All tests passing
□ Security audit completed

# Docker Compose Setup:
□ PostgreSQL container
□ Redis container
□ API container
□ Web container
□ Nginx reverse proxy
□ Volume mounts for uploads/sessions
□ Network configuration

# Post-deployment:
□ Health checks passing
□ Monitoring tools active
□ Backup cron job running
□ WhatsApp connected
□ Admin user created
□ Test transactions performed
```

## PERFORMANCE TARGETS

```
- Page load time: < 2 seconds
- API response time: < 500ms (95th percentile)
- Database query time: < 100ms
- WhatsApp message delivery: < 5 seconds
- Dashboard real-time updates: < 1 second delay
- PDF generation: < 3 seconds
- Image upload: < 2 seconds
```

## MAINTENANCE & UPDATES

```
Weekly:
- Review error logs
- Check WhatsApp connection
- Monitor campaign performance
- Database backup verification

Monthly:
- Security updates
- Dependency updates
- Performance optimization
- Feature enhancements
- User feedback review
```

---

## FINAL NOTES FOR AI AGENT

When implementing this system:

1. **Start with Phase 1** - Don't jump ahead
2. **Test each feature** before moving to next
3. **Follow the database schema exactly** - relationships are critical
4. **Implement anti-ban carefully** - WhatsApp can ban accounts
5. **Use TypeScript** - type safety is crucial
6. **Write clean, documented code** - this will be maintained
7. **Handle errors gracefully** - log everything
8. **Optimize queries** - use indexes properly
9. **Secure sensitive data** - encrypt API keys, hash passwords
10. **Test the complete workflow** - QR → Quotation → Approval → Repair → Invoice

**Remember**: This is a production system handling real business operations. Code quality, reliability, and security are paramount.

---

**Good luck building this comprehensive system! 🚀**

- Let's start with Phase 1: Foundation. 
  Please help me:
  1. Setup Next.js project structure
  2. Setup Node.js API with TypeScript
  3. Configure Prisma with PostgreSQL
  4. Create Docker Compose file

- Great! The project structure is ready. Now help me with:

  1. Create the complete Prisma schema based on the database schema 
     in the master prompt (all 20+ tables)
  2. Setup the initial migration
  3. Create seed data for:
    - 1 Admin user
    - Initial settings (business hours, tax rate, etc.)
    - 5 sample products

- Now I need to implement the authentication system. Based on the 
  master prompt requirements:

  1. JWT authentication with access & refresh tokens
  2. Login/Logout endpoints
  3. Role-based middleware (Admin, Technician, Cashier, Manager)
  4. Redis session management

- Please provide:
  - Auth service code
  - API routes (/api/auth/login, /api/auth/logout, /api/auth/refresh)
  - JWT middleware
  - Redis connection setup

- Now let's setup the frontend. I need:

  1. Layout components with sidebar navigation
  2. Login page
  3. Dashboard skeleton (just layout, no data yet)
  4. Dark/Light theme toggle using Shadcn/ui
  5. Protected route wrapper

- Use Shadcn/ui components and Tailwind CSS as specified 
  in the master prompt.

  Help me test Phase 1. Provide:
  1. Commands to run the application
  2. Test credentials to login
  3. Checklist to verify everything works
  4. Common errors and how to fix them

- Phase 1 is working! Let's move to Phase 2: Core Features.

  First, implement Customer Management:

  1. Customer CRUD API endpoints (GET, POST, PUT, DELETE /api/customers)
  2. Customer list page with:
    - Search by name/phone
    - Filter by customer type
    - Pagination
  3. Customer detail page showing:
    - Profile info
    - Device list
    - Job history
  4. Add/Edit customer form

- Follow the database schema from master prompt.

  Now add Device Management:

  1. Device CRUD endpoints
  2. Link devices to customers
  3. Device list in customer profile
  4. Add device form (modal)

- Now the most important part - Repair Jobs.

  First, implement the basic structure:

  1. Job CRUD endpoints
  2. Job listing page with filters:
    - Status filter (Pending, In Progress, Completed, etc.)
    - Date range filter
    - Customer search
  3. Job detail page showing:
    - Job info
    - Customer info
    - Device info
    - Status timeline
  4. Create job form

- Now implement the QR Code feature from the SOP workflow:

  1. When creating a job, generate unique QR code
  2. QR code links to: /register/{unique_token}
  3. Create public registration form at that URL:
    - Customer fills: name, phone, device_type, model
    - Accept T&C checkbox
    - Auto-create customer if new
    - Link to existing job
  4. Display QR code in job detail page for technician to show customer

  This is critical for the workflow!

- Jobs need photo documentation. Implement:

  1. Photo upload endpoint (multiple files)
  2. Store in /uploads directory
  3. Photo type: Before, During, After
  4. Display photos in job detail page
  5. Gallery view component

- Now let's integrate WhatsApp using Baileys library:

  1. WhatsApp service setup
  2. QR code authentication endpoint
  3. Connection status endpoint
  4. Send message function
  5. Receive message handler
  6. Store messages in database

  Create a settings page where admin can:
  - See WhatsApp QR to pair device
  - Check connection status
  - Disconnect/Reconnect

- Create the message template system as per SOP:

  1. Store templates in database (settings table)
  2. Template variables: {name}, {diagnosis}, {amount}, etc.
  3. Function to replace variables
  4. Create these templates:
     - Confirmation message
     - Quotation message
     - Approved message
     - Rejected message
     - Progress update
     - Completion message
     - Thank you message

  Create UI to edit templates in settings page.

- Let's test Phase 2 completely:

  1. Create a test customer
  2. Register device
  3. Create repair job with QR
  4. Test QR registration flow
  5. Upload photos
  6. Connect WhatsApp
  7. Send test message

  Provide test scenarios and expected results.

- Time to add AI! Based on master prompt:

  1. OpenAI service wrapper
  2. Function to build context from:
     - Customer history
     - Job status
     - Product info
  3. Intent detection
  4. Generate response
  5. Store conversation in ai_conversations table
  6. Add "Ask AI" feature in WhatsApp messages view

  Use GPT-4 model as specified.

- Implement the quotation workflow from SOP:

  1. When technician enters diagnosis & cost in job detail:
     - Update job status to 'Quoted'
     - Create quotation record
     - Auto-send WhatsApp message with template
     - Schedule reminders (Day 1, 20, 30)

  2. When customer replies "SETUJU" or "TAK SETUJU":
     - Detect response
     - Update job status (Approved/Rejected)
     - Send appropriate follow-up message

  This is the core automation!

- We need message queuing for reliability. Setup Bull with Redis:

  1. Configure Bull queues
  2. Create jobs for:
     - Scheduled messages (reminders)
     - Campaign messages
     - Delayed messages
  3. Queue processor
  4. Failed job handler
  5. Queue monitoring UI (optional)

- Implement the smart reminder system from SOP:

  1. Cron job (runs every hour)
  2. Check jobs with status='Quoted' and customer_approved=false
  3. Calculate days since date_quoted
  4. Send reminders based on schedule:
     - Day 1: Reminder 1
     - Day 20: Reminder 2
     - Day 30: Reminder 3
  5. Log in reminders table
  6. Don't send duplicate reminders

  This must be bulletproof!

- Now automate the entire job lifecycle:

  1. Job Status: 'In Progress'
     → Send: "Laptop anda akan dibaiki. Tunggu update dari kami"

  2. Technician uploads progress photos
     → Send: Photos + progress message

  3. Job Status: 'Completed'
     → Generate invoice
     → Send: Completion photos + invoice PDF + pickup message

  4. Job Status: 'Delivered'
     → Send: Thank you + review request link
 
  Implement all these triggers.

- Full workflow test:

  1. Create job → Customer gets confirmation
  2. Submit quotation → Customer gets quotation message
  3. Don't respond → Test reminder after 1 day (manually trigger cron)
  4. Approve quotation → Check status change + message
  5. Update to In Progress → Check message sent
  6. Upload photos → Check photos delivered
  7. Complete job → Check invoice + completion message
  8. Mark delivered → Check thank you message

  Provide test script.

- Implement inventory system:

  1. Product CRUD endpoints
  2. Product listing page with:
     - Search by name/SKU/barcode
     - Category filter
     - Low stock indicator
  3. Add/Edit product form
  4. Barcode scanner support (optional)

- Track all stock changes:

  1. When product quantity changes, log in stock_movements
  2. Movement types: Purchase, Sale, Adjustment, Job Usage
  3. Stock movement history page
  4. Low stock alerts

- Create the POS transaction page:

  1. Product search/scan
  2. Add to cart
  3. Calculate subtotal, tax, discount, total
  4. Multiple payment methods
  5. Process payment
  6. Generate invoice
  7. Deduct stock
  8. Print receipt option
  9. Send invoice via WhatsApp

  Make it fast and intuitive!

- Complete invoice management:

  1. Invoice listing (all, paid, unpaid, overdue)
  2. Invoice detail view
  3. Manual invoice creation
  4. Generate PDF
  5. Send via WhatsApp/Email
  6. Payment recording
  7. Outstanding balance tracking

- Connect repair jobs with invoicing:

  1. When job is completed, generate invoice automatically
  2. Include:
     - Parts used (from job_parts table)
     - Labor cost
     - Additional charges
  3. Link invoice_id to job
  4. Show invoice in job detail page

- Test complete sales flow:

  1. Add products to inventory
  2. Create POS sale → Check invoice + stock deduction
  3. Create repair job → Complete it → Check auto-invoice
  4. Record payment → Check balance updated
  5. Generate PDF → Check format
  6. Send invoice via WhatsApp → Verify delivery

  Provide test data.

- Build campaign management:

  1. Campaign CRUD endpoints
  2. Campaign creation page:
     - Name, type (Promotional, Announcement, etc.)
     - Message composer with variables
     - Media upload
     - Target audience builder (filters)
     - Schedule or send now
  3. Campaign listing with status

- Create flexible filtering system:

  1. Filter customers by:
     - Customer type (VIP, Regular, New)
     - Last visit date
     - Total spending
     - Tags
     - Custom combinations
  2. Preview target count
  3. Save filter presets

- This is CRITICAL! Implement anti-ban as per master prompt:

  1. Rate limiting: Max 150 messages/day
  2. Random delay: 30-60 seconds between messages
  3. Business hours check: Only 9 AM - 6 PM
  4. Personalize each message (variable replacement)
  5. Session rotation (if multiple)
  6. Respect opt-out
  7. Handle failures gracefully

  Create campaign processor with Bull queue.

- Implement campaign sending:

  1. Start campaign → Create Bull jobs for each target
  2. Process queue with anti-ban rules
  3. Track delivery status in real-time
  4. Update campaign statistics
  5. Pause/Resume functionality
  6. Handle failures (retry logic)

- Show campaign performance:

  1. Campaign detail page with:
     - Messages sent/delivered/read
     - Delivery rate
     - Read rate
     - Response tracking
  2. Real-time progress bar
  3. Failed message list

- Test campaign system carefully:

  1. Create campaign with 5 test numbers
  2. Start campaign → Monitor sending
  3. Check delays are working (30-60s)
  4. Verify personalization
  5. Test pause/resume
  6. Check daily limit enforcement
  7. Verify business hours restriction

  IMPORTANT: Test with your own numbers first!

- Create real-time dashboard:

  1. Stats cards:
     - Today's revenue
     - Pending jobs
     - Active jobs
     - New customers
     - Low stock items
  2. Recent activities feed
  3. Charts:
     - Sales trend (last 7 days)
     - Job completion rate
     - Customer growth
  4. Quick actions buttons

  Use Socket.io for real-time updates.

- Create comprehensive reports:

  1. Sales Report:
     - Date range filter
     - Revenue, transactions, average sale
     - Payment method breakdown
     - Export to PDF/Excel

  2. Job Report:
     - Completion rate
     - Average turnaround time
     - Technician performance
     - Revenue by job type

  3. Customer Report:
     - New vs returning
     - Top customers
     - Customer lifetime value
     - Retention rate

  4. Inventory Report:
     - Stock levels
     - Stock movement summary
     - Low stock items
     - Product sales ranking

  5. WhatsApp Report:
     - Message volume
     - Campaign performance
     - Response rates
     - Customer engagement

- Complete all settings:

  1. General Settings:
     - Company info
     - Tax rate
     - Currency
     - Business hours
     - Terms & conditions

  2. WhatsApp Settings:
     - Connection management
     - Session info
     - Anti-ban configuration
     - Message templates editor

  3. AI Settings:
     - OpenAI API key (encrypted)
     - Model selection
     - Parameters (temperature, max tokens)
     - Test connection button

  4. User Management:
     - User list
     - Add/Edit users
     - Role assignment
     - Activity logs

  5. Backup/Restore:
     - Manual backup button
     - Schedule settings
     - Restore interface
     - Backup history

  6. System Info:
     - Version
     - Database status
     - Redis status
     - Disk usage

- Implement backup/restore:

  1. Manual backup trigger
  2. Automated daily backup (cron)
  3. Backup includes:
     - Database dump
     - Uploaded files
     - WhatsApp sessions
  4. 30-day retention
  5. Restore functionality
  6. Download backup file

- Final testing phase. Help me:

  1. Write unit tests for critical functions
  2. Integration tests for API endpoints
  3. E2E tests for main workflows
  4. Performance testing
  5. Security audit checklist
  6. Fix identified bugs

- Create user documentation:

  1. Admin guide:
     - System setup
     - User management
     - Settings configuration
   
  2. User guide:
     - Creating jobs
     - Processing quotations
     - Using POS
     - Running campaigns
   
  3. Technical documentation:
     - API documentation
     - Database schema
     - Deployment guide
     - Troubleshooting

  4. README.md with:
     - Installation steps
     - Environment variables
     - Running the app
     - Common issues

- Help me prepare for production:

  1. Environment variables for production
  2. Docker optimization
  3. Nginx configuration
  4. SSL certificate setup (Let's Encrypt)
  5. Domain configuration
  6. Database optimization
  7. Redis configuration
  8. Security hardening

- Guide me through deployment to:
  [Choose: DigitalOcean / AWS / VPS / Local Server]

  1. Server requirements
  2. Installation steps
  3. Database setup
  4. Running Docker containers
  5. Testing deployment
  6. Monitoring setup

- After deployment, help me:

  1. Initialize WhatsApp session
  2. Create admin user
  3. Configure settings
  4. Add initial data
  5. Test all features
  6. Setup automated backups
  7. Configure monitoring

- Current Phase Status Check:

  1. What have we completed so far?
  2. What's working correctly?
  3. What issues did we encounter?
  4. What's next on the list?
  5. Any blockers or questions?

  Please review and advise.
